{"version":3,"file":"index.js","sources":["../src/utils.js","../src/messages.js","../src/types/min.js","../src/types/max.js","../src/types/isType.js","../src/types/isEmail.js","../src/types/compare.js","../src/types/required.js","../src/types/isEqual.js","../src/types/isUrl.js","../src/types/minWords.js","../src/types/maxWords.js","../src/types/isUpperCase.js","../src/types/isLowerCase.js","../src/types/isCapitalize.js","../src/types/minNumberRange.js","../src/types/maxNumberRange.js","../src/types/notAllowedChars.js","../src/types/notAllowedCharacters.js","../src/types/notAllowedSpecialChars.js","../src/types/notAllowedWords.js","../src/types/isHex.js","../src/types/notAllowedNumber.js","../src/types/regex.js","../src/types/strongPassword.js","../src/types/mediumPassword.js","../src/index.js"],"sourcesContent":["export const isFunction = val => typeof val === 'function' ? true : false\r\nexport const isArray = val => typeof val === 'object' && Array.isArray(val) ? true : false\r\nexport const isObject = val => typeof val === 'object' && val !== null && !Array.isArray(val) ? true : false\r\nexport const isString = (val) => typeof val === 'string' ? true : false\r\nexport const isNumber = (val) => !isNaN(val) ? true : false\r\nexport const isInteger = (val) => typeof val === 'number' ? true : false\r\n\r\nexport const parseType = (compare) => {\r\n\r\n    let message     = null\r\n    let compareVal  = compare\r\n\r\n    if(isArray(compare)){\r\n        compareVal = compare[0]\r\n        message = compare[1]\r\n    }\r\n    \r\n    return {\r\n        message,\r\n        compareVal\r\n    }\r\n}","export default {\r\n    email: '$field must be an email!',\r\n    equal: '$field must be same as $compare',\r\n    url: '$field must be a valid URL',\r\n    max: '$field maximum length of $compare',\r\n    min: '$field minimum length of $compare',\r\n    required: '$field is required!',\r\n    type: '$field must be $compare',\r\n    minWords: '$field minimum words limit $compare',\r\n    maxWords: '$field maximum words limit $compare',\r\n    minNumberRange: '$field minimum Range of $compare',\r\n    maxNumberRange: '$field maximum Range of $compare',\r\n    uppercase: '$field must be uppercase!',\r\n    lowercase: '$field must be lowercase!',\r\n    capitalize: '$field must be capitalize!',\r\n    notAllowedChars: '$compare these charters are not allowed in $field',\r\n    notAllowedCharters: 'charters are not allowed in $field',\r\n    notAllowedSpecialChars: 'special charters are not allowed in $field',\r\n    notAllowedWords: '$compare these words are not allowed in $field',\r\n    notAllowedNumber: 'number are not allowed in $field',\r\n    hex: '$field must be a hexadecimal charters',\r\n    regex: 'wrong value passed in $field',\r\n    strongPassword: 'use 8 or more characters with a mix of letters, numbers & symbols in $field',\r\n    mediumPassword: 'use 6 or more characters with a mix of letters, numbers & symbols in $field',\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return value.length >= compare\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n           return value.length <= compare \r\n        }\r\n    }\r\n}","import {isArray, isObject, isString} from '../utils'\r\n\r\n\r\nconst types = {\r\n    bool: (val) => typeof val === 'boolean',\r\n    number: (val) => !isNaN(val),\r\n    string: (val) => isString(val),\r\n    array: (val) => isArray(val),\r\n    object: (val) => isObject(val),\r\n}\r\n\r\nexport default (value, compare) => {\r\n    if(value){\r\n        if(!types.hasOwnProperty(compare)){\r\n            message = `Invalide type given`\r\n            console.error(message, `Available Types are ${Object.keys(types).join(', ')}`)\r\n            return false\r\n        }\r\n        return types[compare](value)\r\n    }\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            const valid = value.toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\r\n            if(valid != null){\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n    }\r\n}","import {isFunction} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n\r\n    if(!isFunction(compare)){\r\n        console.error(`compare must be a function`)\r\n        return false\r\n    }\r\n\r\n    if(value){\r\n        const check = compare(value)\r\n        if(typeof check === 'boolean'){\r\n            return check\r\n        }\r\n    }\r\n    \r\n}","import {isArray, isObject, isString, isInteger} from '../utils'\r\n\r\nexport default (value) => {\r\n    if(!value){\r\n        return false\r\n    }else if(isString(value) || isArray(value)){\r\n        return value.length ? true : false\r\n    }else if(isObject(value)){\r\n        return Object.keys(value).length ? true : false\r\n    }else if(isInteger(value)){\r\n        return value ? true : false\r\n    }\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return value.toLowerCase() === compare.toLowerCase()\r\n        }\r\n    }\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(!value.toLowerCase().match(/ /g)){\r\n                var res = value.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g);\r\n                if(res !== null){\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        }\r\n    }\r\n\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return value.split(' ').length >= compare\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return value.split(' ').length <= compare\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return value === value.toUpperCase()\r\n        }\r\n    }\r\n}","import {isString} from '../utils'\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return value === value.toLowerCase()\r\n        }\r\n    }\r\n}","import {isString} from '../utils'\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return value === value.replace(/(?:^|\\s)\\S/g, w => w.toUpperCase())\r\n        }\r\n    }\r\n          \r\n}","import {isNumber} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isNumber(value) || isNumber(value)){\r\n        if(value.toString().length){\r\n            return parseInt(value) >= parseInt(compare)\r\n        }\r\n    }\r\n}","import {isNumber} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isNumber(value) || isNumber(value)){\r\n        if(value.toString().length){\r\n            return parseInt(value) <= parseInt(compare)\r\n        }\r\n    }\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            const format = new RegExp('['+compare+']')\r\n            return !format.test(value)\r\n        }\r\n    }\r\n    \r\n}","var format = /^([^a-zA-Z]*)$/\r\nimport {isString, isNumber} from '../utils'\r\n\r\nexport default (value) => {\r\n    if(isString(value) || isNumber(value)){\r\n        value = value.toString()\r\n        if(value.length){\r\n            return format.test(value)\r\n        }\r\n    }\r\n    \r\n}","var format = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\r\n\r\nimport {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return !format.test(value)\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            const words = compare.replace(',', \"|\")\r\n            const pattern = new RegExp(words)\r\n            return  !value.match(pattern);\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\nvar format = /[0-9A-Fa-f]{6}/g\r\n\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(format.test(value)) {\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n    }\r\n}","var format = /^([^0-9]*)$/\r\nimport {isString, isNumber} from '../utils'\r\n\r\nexport default (value) => {\r\n    if(isString(value) || isNumber(value)){\r\n        value = value.toString()\r\n        if(value.length){\r\n            return format.test(value)\r\n        }\r\n    }\r\n    \r\n}","import {isString, isNumber} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value) || isNumber(value)){\r\n        value = value.toString()\r\n        if(value.length){\r\n            return compare.test(value)\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\nlet format = new RegExp('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,})')\r\n\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        value = value.toString()\r\n        if(value.length){\r\n            return format.test(value)\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\nlet format = new RegExp('((?=.*[a-z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{6,}))|((?=.*[a-z])(?=.*[^A-Za-z0-9])(?=.{8,}))')\r\n\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        value = value.toString()\r\n        if(value.length){\r\n            return format.test(value)\r\n        }\r\n    }\r\n    \r\n}","import {isArray, isObject, isFunction, isString, parseType} from './utils'\r\nimport MESSAGES from './messages'\r\n\r\nimport min from './types/min'\r\nimport max from './types/max'\r\nimport isType from './types/isType'\r\nimport isEmail from './types/isEmail'\r\nimport compare from './types/compare'\r\nimport required from './types/required'\r\nimport isEqual from './types/isEqual'\r\nimport isUrl from './types/isUrl'\r\nimport minWords from './types/minWords'\r\nimport maxWords from './types/maxWords'\r\nimport isUpperCase from './types/isUpperCase'\r\nimport isLowerCase from './types/isLowerCase'\r\nimport isCapitalize from './types/isCapitalize'\r\nimport minNumberRange from './types/minNumberRange'\r\nimport maxNumberRange from './types/maxNumberRange'\r\nimport notAllowedChars from './types/notAllowedChars'\r\nimport notAllowedCharacters from './types/notAllowedCharacters'\r\nimport notAllowedSpecialChars from './types/notAllowedSpecialChars'\r\nimport notAllowedWords from './types/notAllowedWords'\r\nimport isHex from './types/isHex'\r\nimport notAllowedNumber from './types/notAllowedNumber'\r\nimport regex from './types/regex'\r\nimport strongPassword from './types/strongPassword'\r\nimport mediumPassword from './types/mediumPassword'\r\n\r\n\r\nexport {\r\n    isType,\r\n    isEmail,\r\n    isEqual,\r\n    isUrl,\r\n    isHex,\r\n    isUpperCase,\r\n    isLowerCase,\r\n    isCapitalize,\r\n    minWords,\r\n    maxWords,\r\n    minNumberRange,\r\n    maxNumberRange,\r\n    notAllowedChars,\r\n    notAllowedCharacters,\r\n    notAllowedSpecialChars,\r\n    notAllowedWords,\r\n    notAllowedNumber,\r\n    regex,\r\n    strongPassword,\r\n    mediumPassword,\r\n}\r\n\r\n\r\n\r\nconst TYPES = {\r\n    type: isType,\r\n    email: isEmail,\r\n    equal: isEqual,\r\n    url: isUrl,\r\n    hex: isHex,\r\n    uppercase: isUpperCase,\r\n    lowercase: isLowerCase,\r\n    capitalize: isCapitalize,\r\n    min,\r\n    max,\r\n    compare,\r\n    required,\r\n    minWords,\r\n    maxWords,\r\n    minNumberRange,\r\n    maxNumberRange,\r\n    notAllowedChars,\r\n    notAllowedCharacters, \r\n    notAllowedSpecialChars,\r\n    notAllowedWords,\r\n    notAllowedNumber,\r\n    regex,\r\n    strongPassword,\r\n    mediumPassword\r\n}\r\n\r\n\r\n\r\n/**\r\n * Validator\r\n */\r\nexport default (data, schema) => {\r\n   \r\n    \r\n    const info = {\r\n        data: isObject(data) ? data : {},\r\n        schema: isObject(schema) ? schema : {},\r\n        errors: {},\r\n        callback: null,\r\n        set: (name, value, _schema) => {\r\n            info.data[name] = value\r\n            info.schema[name] = _schema\r\n        },\r\n        hasError: (name) => {\r\n            if(name === undefined){\r\n                return Object.keys(info.errors).length ? true : false\r\n            }\r\n            if(info.errors[name]){\r\n                return true\r\n            }\r\n        },\r\n        getError: (name) => {\r\n            if(!name){\r\n                return info.errors\r\n            }\r\n            \r\n            return info.errors[name]\r\n        },\r\n        removeError: (name) => {\r\n            if(info.errors[name]){\r\n                delete info.errors[name]\r\n                if(isFunction(info.callback)){\r\n                    info.callback('removeError', info)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    info.validate = () => {\r\n        \r\n        // comparing\r\n        for(let fieldName in info.data){\r\n            if(info.schema[fieldName]){\r\n                \r\n                let value = info.data[fieldName]\r\n                const schem = info.schema[fieldName]\r\n                if(isString(value)){\r\n                    value = value.trim()\r\n                }\r\n                if(!isObject(schem)){\r\n                    console.error(new Error(`You passed wrong format in the schema for this ${fieldName}`))\r\n                    break;\r\n                }\r\n\r\n                for(let type in schem){\r\n\r\n                    // avoid some fields\r\n                    if(type == 'nameAlias'){\r\n                        continue\r\n                    }\r\n\r\n\r\n                    if(TYPES.hasOwnProperty(type)){\r\n\r\n                        if(info.hasError(fieldName)){\r\n                            break;\r\n                        }\r\n                        let {message, compareVal} = parseType(schem[type])\r\n                        const compared = TYPES[type](value, compareVal)\r\n\r\n                        if(compared === false){\r\n                            const field = schem['nameAlias'] || fieldName\r\n                            if(!message && MESSAGES.hasOwnProperty(type)){\r\n                                message = MESSAGES[type]\r\n                            }\r\n                            message = message.replace('$field', field)\r\n                            message = message.replace('$compare', schem[type])\r\n                            info.errors[fieldName] = message\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if(isFunction(info.callback)){\r\n            info.callback('validate', info)\r\n        }\r\n\r\n        return info.hasError()\r\n    }\r\n\r\n    return info\r\n}\r\n"],"names":["isFunction","val","isArray","Array","isObject","isString","isNumber","isNaN","isInteger","parseType","compare","message","compareVal","email","equal","url","max","min","required","type","minWords","maxWords","minNumberRange","maxNumberRange","uppercase","lowercase","capitalize","notAllowedChars","notAllowedCharters","notAllowedSpecialChars","notAllowedWords","notAllowedNumber","hex","regex","strongPassword","mediumPassword","value","length","types","bool","number","string","array","object","hasOwnProperty","console","error","Object","keys","join","valid","toLowerCase","match","check","res","split","toUpperCase","replace","w","toString","parseInt","format","RegExp","test","words","pattern","TYPES","isType","isEmail","isEqual","isUrl","isHex","isUpperCase","isLowerCase","isCapitalize","notAllowedCharacters","data","schema","info","errors","callback","set","name","_schema","hasError","undefined","getError","removeError","validate","fieldName","schem","trim","Error","compared","field","MESSAGES"],"mappings":"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"}