{"version":3,"file":"index.modern.js","sources":["../src/utils.js","../src/types/min.js","../src/types/max.js","../src/types/isType.js","../src/types/isEmail.js","../src/types/compare.js","../src/types/required.js","../src/types/isEqual.js","../src/types/isUrl.js","../src/types/minWords.js","../src/types/maxWords.js","../src/types/isUpperCase.js","../src/types/isLowerCase.js","../src/types/isCapitalize.js","../src/types/minNumberRange.js","../src/types/maxNumberRange.js","../src/types/notAllowedChars.js","../src/types/notAllowedCharacters.js","../src/types/notAllowedSpecialChars.js","../src/types/notAllowedWords.js","../src/types/isHex.js","../src/types/notAllowedNumber.js","../src/types/regex.js","../src/types/strongPassword.js","../src/types/mediumPassword.js","../src/types/notEqualWith.js","../src/types/oneOfType.js","../src/types/oneOf.js","../src/types/exact.js","../src/types/shape.js","../src/index.js"],"sourcesContent":["export const isFunction = val => typeof val === 'function' ? true : false\r\nexport const isArray = val => typeof val === 'object' && Array.isArray(val) ? true : false\r\nexport const isObject = val => typeof val === 'object' && val !== null && !Array.isArray(val) ? true : false\r\nexport const isString = (val) => typeof val === 'string' ? true : false\r\nexport const isNumber = (val) => !isNaN(val) ? true : false\r\nexport const isInteger = (val) => typeof val === 'number' ? true : false\r\nexport const isBool = (val) => typeof val === 'boolean' ? true : false\r\n\r\n\r\nexport const isEmpty = (val) => {\r\n    if(isString(val) || isArray(val)){\r\n        return !val.length\r\n    }else if(isObject(val)){\r\n        return !Object.keys(val).length\r\n    }else if(!val){\r\n        return true\r\n    }\r\n}\r\n\r\n\r\nexport const parseType = (compare) => {\r\n\r\n    let error       = null\r\n    let compareVal  = compare\r\n\r\n    if(isArray(compare) && compare.length === 2 && compare[1] instanceof Error){\r\n        compareVal  = compare[0]\r\n        error       = compare[1]\r\n    }\r\n    \r\n    return {\r\n        error,\r\n        compareVal\r\n    }\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(!(value.length >= compare)){\r\n                return new Error('$field minimum length of $compare')\r\n            }\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n           if(!(value.length <= compare )){\r\n               return new Error('$field maximum length of $compare')\r\n           }\r\n        }\r\n    }\r\n}","import {isArray, isObject, isString} from '../utils'\r\n\r\n\r\nconst types = {\r\n    bool: (val) => typeof val === 'boolean',\r\n    number: (val) => !isNaN(val),\r\n    string: (val) => isString(val),\r\n    array: (val) => isArray(val),\r\n    object: (val) => isObject(val),\r\n}\r\n\r\nexport default (value, compare) => {\r\n    if(value){\r\n        if(!types.hasOwnProperty(compare)){\r\n            message = `Invalide type given`\r\n            console.error(message, `Available Types are ${Object.keys(types).join(', ')}`)\r\n            return new Error(message)\r\n        }\r\n        \r\n        if(!types[compare](value)){\r\n            return new Error('$field must be $compare')\r\n        }\r\n    }\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            const valid = value.toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\r\n            if(valid == null){\r\n                return new Error('$field must be an email!')\r\n            }\r\n        }\r\n    }\r\n}","import {isFunction} from '../utils'\r\n\r\nexport default (value, compare, root) => {\r\n\r\n    if(!isFunction(compare)){\r\n        console.error('compare must be a function')\r\n        return new Error('compare must be a function')\r\n    }\r\n\r\n    if(value){\r\n        return compare(value, root)\r\n    }\r\n    \r\n}","import {isArray, isObject, isString, isInteger} from '../utils'\r\n\r\nexport default (value) => {\r\n    if(!value){\r\n        return false\r\n    }else if(isString(value) || isArray(value)){\r\n        return value.length ? true : false\r\n    }else if(isObject(value)){\r\n        return Object.keys(value).length ? true : false\r\n    }else if(isInteger(value)){\r\n        return value ? true : false\r\n    }\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(value.toLowerCase() !== compare.toLowerCase()){\r\n                return new Error('$field must be same as $compare')\r\n            }\r\n        }\r\n    }\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(!value.toLowerCase().match(/ /g)){\r\n                var res = value.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g);\r\n                if(res == null){\r\n                   return new Error('$field must be a valid URL')\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(!(value.split(' ').length >= compare)){\r\n                return new Error('$field minimum words limit $compare')\r\n            }\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(!(value.split(' ').length <= compare)){\r\n                return new Error('$field maximum words limit $compare')\r\n            }\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(value !== value.toUpperCase()){\r\n                return new Error('$field must be uppercase!')\r\n            }\r\n        }\r\n    }\r\n}","import {isString} from '../utils'\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(value !== value.toLowerCase()){\r\n                return new Error('$field must be lowercase!')\r\n            }\r\n        }\r\n    }\r\n}","import {isString} from '../utils'\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length && value !== value.replace(/(?:^|\\s)\\S/g, w => w.toUpperCase())){\r\n            return new Error('$field must be capitalize!')\r\n        }\r\n    }\r\n}","import {isNumber} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isNumber(value) || isNumber(value)){\r\n        if(value.toString().length){\r\n            if(!(parseInt(value) >= parseInt(compare))){\r\n                return new Error('$field minimum Range of $compare')\r\n            }\r\n        }\r\n    }\r\n}","import {isNumber} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isNumber(value) || isNumber(value)){\r\n        if(value.toString().length){\r\n           if(!(parseInt(value) <= parseInt(compare))){\r\n               return new Error('$field maximum Range of $compare')\r\n           }\r\n        }\r\n    }\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            const format = new RegExp('['+compare+']')\r\n            if(format.test(value)){\r\n                return new Error('$compare these characters are not allowed in $field')\r\n            }\r\n        }\r\n    }\r\n    \r\n}","var format = /^([^a-zA-Z]*)$/\r\nimport {isString, isNumber} from '../utils'\r\n\r\nexport default (value) => {\r\n    if(isString(value) || isNumber(value)){\r\n        value = value.toString()\r\n        if(value.length){\r\n            if(!format.test(value)){\r\n                return new Error('characters are not allowed in $field')\r\n            }\r\n        }\r\n    }\r\n}","var format = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\r\n\r\nimport {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(format.test(value)){\r\n                return new Error('special characters are not allowed in $field')\r\n            }\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            const words = compare.replace(',', \"|\")\r\n            const pattern = new RegExp(words)\r\n            if(value.match(pattern)){\r\n                return new Error('$compare these words are not allowed in $field')\r\n            }\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\nvar format = /^#(?:[0-9a-fA-F]{3}){1,2}$/\r\n\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(!format.test(value)) {\r\n                return new Error('$field must be a hexadecimal characters')\r\n            }\r\n        }\r\n    }\r\n}","var format = /^([^0-9]*)$/\r\nimport {isString, isNumber} from '../utils'\r\n\r\nexport default (value) => {\r\n    if(isString(value) || isNumber(value)){\r\n        value = value.toString()\r\n        if(value.length){\r\n            if(!format.test(value)){\r\n                return new Error('number are not allowed in $field')\r\n            }\r\n        }\r\n    }\r\n    \r\n}","import {isString, isNumber} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value) || isNumber(value)){\r\n        value = value.toString()\r\n        if(value.length){\r\n            return compare.test(value)\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\nlet format = new RegExp('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,})')\r\n\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        value = value.toString()\r\n        if(value.length){\r\n            return format.test(value)\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\nlet format = new RegExp('((?=.*[a-z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{6,}))|((?=.*[a-z])(?=.*[^A-Za-z0-9])(?=.{8,}))')\r\n\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        value = value.toString()\r\n        if(value.length){\r\n            if(!format.test(value)){\r\n                return new Error('use 6 or more characters with a mix of letters, numbers & symbols in $field')\r\n            }\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, field_name, {root}) => {\r\n\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(root.data.hasOwnProperty(field_name)){\r\n                const fieldValue = root.data[field_name]\r\n                if(value.toLowerCase() === fieldValue.toLowerCase()){\r\n                    return new Error(\"$field not be equal with $compare\")\r\n                }\r\n            }else{\r\n                console.error(`${field_name} is not exists in data object`)\r\n            }\r\n        }\r\n    }\r\n}","import {isEmpty, isArray} from '../utils'\r\nimport isType from './isType'\r\n\r\nexport default (value, compare) => {\r\n    if(!isArray(compare)){\r\n        const message = \"property must be an array\"\r\n        console.error(message)\r\n        return new Error(message)\r\n    }\r\n\r\n    if(!isEmpty(value)){\r\n        let perfect = false\r\n\r\n        for(let t of compare){\r\n            const check = isType(value, t)\r\n            if(!(check instanceof Error)){\r\n                perfect = true\r\n                break\r\n            }\r\n        }\r\n        if(!perfect){\r\n            return new Error(\"$field must be one of type \"+compare.join('|'))\r\n        }\r\n    }\r\n}","import {isString, isArray} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    \r\n    if(!isArray(compare)){\r\n        const message = \"property must be an array\"\r\n        console.error(message)\r\n        return new Error(message)\r\n    }\r\n\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(!compare.includes(value)){\r\n                return new Error(\"$field must be one of \"+compare.join('|'))\r\n            }\r\n        }\r\n    }\r\n}","import {isString, isObject, isEmpty} from '../utils'\r\nimport validex from '../index'\r\n\r\nexport default (data, exactOb) => {\r\n    \r\n    if(!isObject(exactOb)){\r\n        const message = \"exact property must be an Object\"\r\n        console.error(message)\r\n        return new Error(message)\r\n    }  \r\n\r\n\r\n    if(isObject(data)&& !isEmpty(data)){\r\n\r\n        if(Object.keys(data).length != Object.keys(exactOb).length){\r\n            return new Error('Pass invalid properties for $field')\r\n        }\r\n\r\n        let keys = []\r\n        for(let key in data){\r\n            if(!exactOb.hasOwnProperty(key)){\r\n                keys.push(key)\r\n            }\r\n        }\r\n        if(keys.length){\r\n            return new Error('Pass invalid properties for $field')\r\n        }\r\n        const check = validex(data, exactOb)\r\n        check.validate()\r\n        if(check.hasError()){\r\n            return new Error(\"$field \"+Object.values(check.errors).join(', $field '))\r\n        }\r\n    }\r\n}","import {isString, isObject, isEmpty} from '../utils'\r\nimport validex from '../index'\r\n\r\nexport default (data, shapeOb) => {\r\n    \r\n    if(!isObject(shapeOb)){\r\n        const message = \"shape property must be an Object\"\r\n        console.error(message)\r\n        return new Error(message)\r\n    }  \r\n\r\n    if(isObject(data) && !isEmpty(data)){\r\n        const check = validex(data, shapeOb)\r\n        check.validate()\r\n        if(check.hasError()){\r\n            return new Error(\"$field \"+Object.values(check.errors).join(', $field '))\r\n        }\r\n        \r\n    }\r\n}","import {isObject, isFunction, isString, parseType} from './utils'\r\nexport * from './utils'\r\n\r\nimport min from './types/min'\r\nimport max from './types/max'\r\nimport isType from './types/isType'\r\nimport isEmail from './types/isEmail'\r\nimport compare from './types/compare'\r\nimport required from './types/required'\r\nimport isEqual from './types/isEqual'\r\nimport isUrl from './types/isUrl'\r\nimport minWords from './types/minWords'\r\nimport maxWords from './types/maxWords'\r\nimport isUpperCase from './types/isUpperCase'\r\nimport isLowerCase from './types/isLowerCase'\r\nimport isCapitalize from './types/isCapitalize'\r\nimport minNumberRange from './types/minNumberRange'\r\nimport maxNumberRange from './types/maxNumberRange'\r\nimport notAllowedChars from './types/notAllowedChars'\r\nimport notAllowedCharacters from './types/notAllowedCharacters'\r\nimport notAllowedSpecialChars from './types/notAllowedSpecialChars'\r\nimport notAllowedWords from './types/notAllowedWords'\r\nimport isHex from './types/isHex'\r\nimport notAllowedNumber from './types/notAllowedNumber'\r\nimport regex from './types/regex'\r\nimport strongPassword from './types/strongPassword'\r\nimport mediumPassword from './types/mediumPassword'\r\nimport notEqualWith from './types/notEqualWith'\r\nimport oneOfType from './types/oneOfType'\r\nimport oneOf from './types/oneOf'\r\nimport exact from './types/exact'\r\nimport shape from './types/shape'\r\n\r\n\r\n\r\nexport {\r\n    isType,\r\n    isEmail,\r\n    isEqual,\r\n    isUrl,\r\n    isHex,\r\n    isUpperCase,\r\n    isLowerCase,\r\n    isCapitalize,\r\n    minWords,\r\n    maxWords,\r\n    minNumberRange,\r\n    maxNumberRange,\r\n    notAllowedChars,\r\n    notAllowedCharacters,\r\n    notAllowedSpecialChars,\r\n    notAllowedWords,\r\n    notAllowedNumber,\r\n    regex,\r\n    strongPassword,\r\n    mediumPassword,\r\n    oneOf,\r\n    oneOfType,\r\n    exact,\r\n    shape\r\n}\r\n\r\n\r\n\r\nconst TYPES = {\r\n    type: isType,\r\n    email: isEmail,\r\n    equal: isEqual,\r\n    notEqualWith,\r\n    url: isUrl,\r\n    hex: isHex,\r\n    uppercase: isUpperCase,\r\n    lowercase: isLowerCase,\r\n    capitalize: isCapitalize,\r\n    min,\r\n    max,\r\n    compare,\r\n    required,\r\n    minWords,\r\n    maxWords,\r\n    minNumberRange,\r\n    maxNumberRange,\r\n    notAllowedChars,\r\n    notAllowedCharacters, \r\n    notAllowedSpecialChars,\r\n    notAllowedWords,\r\n    notAllowedNumber,\r\n    regex,\r\n    strongPassword,\r\n    mediumPassword,\r\n    oneOf,\r\n    oneOfType,\r\n    exact,\r\n    shape\r\n}\r\n\r\n\r\n\r\n/**\r\n * Validator\r\n */\r\nexport default (data, schema) => {\r\n   \r\n    \r\n    const root = {\r\n        data: isObject(data) ? data : {},\r\n        schema: isObject(schema) ? schema : {},\r\n        errors: {},\r\n        callback: null,\r\n        set: (name, value, _schema) => {\r\n            root.data[name] = value\r\n            root.schema[name] = _schema\r\n        },\r\n        hasError: (name) => {\r\n            if(name === undefined){\r\n                return Object.keys(root.errors).length ? true : false\r\n            }\r\n            if(root.errors[name]){\r\n                return true\r\n            }\r\n        },\r\n        getError: (name) => {\r\n            if(!name){\r\n                return root.errors\r\n            }\r\n            \r\n            return root.errors[name]\r\n        },\r\n        removeError: (name) => {\r\n            if(root.errors[name]){\r\n                delete root.errors[name]\r\n                if(isFunction(root.callback)){\r\n                    root.callback('removeError', root)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    root.validate = () => {\r\n        \r\n        // comparing\r\n        for(let fieldName in root.data){\r\n            if(root.schema[fieldName]){\r\n                \r\n                let value = root.data[fieldName]\r\n                const schem = root.schema[fieldName]\r\n                if(isString(value)){\r\n                    value = value.trim()\r\n                }\r\n                if(!isObject(schem)){\r\n                    console.error(`You passed wrong format in the schema for this ${fieldName}`)\r\n                    break;\r\n                }\r\n\r\n                for(let type in schem){\r\n\r\n                    // avoid some fields\r\n                    if(type == 'nameAlias'){\r\n                        continue\r\n                    }\r\n\r\n                    if(TYPES.hasOwnProperty(type)){\r\n\r\n                        if(root.hasError(fieldName)){\r\n                            break;\r\n                        }\r\n                        const nameAlias = schem['nameAlias'] || fieldName\r\n                        let {error, compareVal} = parseType(schem[type])\r\n\r\n                        const isError = TYPES[type](value, compareVal, {root, fieldName, type, nameAlias, prop: schem[type]})\r\n                        if(isError instanceof Error){\r\n                            let message = ''\r\n\r\n                            if(!(error instanceof Error)){\r\n                                message = isError.message\r\n                            }else{\r\n                                message = error.message\r\n                            }\r\n\r\n                            message = message.replace(/\\$field/g, nameAlias)\r\n                            message = message.replace(/\\$compare/g, schem[type])\r\n                            root.errors[fieldName] = message\r\n                        }\r\n                    }else{\r\n                        console.error(`Invalide type ${type}`)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if(isFunction(root.callback)){\r\n            root.callback('validate', root)\r\n        }\r\n\r\n        return root.hasError()\r\n    }\r\n\r\n    return root\r\n}\r\n"],"names":["isFunction","val","isArray","Array","isObject","isString","isNumber","isNaN","isInteger","isBool","isEmpty","length","Object","keys","parseType","compare","error","compareVal","Error","value","types","bool","number","string","array","object","hasOwnProperty","message","console","join","valid","toLowerCase","match","root","res","split","toUpperCase","replace","w","toString","parseInt","format","RegExp","test","words","pattern","field_name","data","fieldValue","perfect","t","check","isType","includes","exactOb","key","push","validex","validate","hasError","values","errors","shapeOb","TYPES","type","email","isEmail","equal","isEqual","notEqualWith","url","isUrl","hex","isHex","uppercase","isUpperCase","lowercase","isLowerCase","capitalize","isCapitalize","min","max","required","minWords","maxWords","minNumberRange","maxNumberRange","notAllowedChars","notAllowedCharacters","notAllowedSpecialChars","notAllowedWords","notAllowedNumber","regex","strongPassword","mediumPassword","oneOf","oneOfType","exact","shape","schema","callback","set","name","_schema","undefined","getError","removeError","fieldName","schem","trim","nameAlias","isError","prop"],"mappings":"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"}