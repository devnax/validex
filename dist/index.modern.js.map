{"version":3,"file":"index.modern.js","sources":["../src/utils.js","../src/messages.js","../src/types/min.js","../src/types/max.js","../src/types/isType.js","../src/types/isEmail.js","../src/types/compare.js","../src/types/required.js","../src/types/isEqual.js","../src/types/isUrl.js","../src/types/minWords.js","../src/types/maxWords.js","../src/types/isUpperCase.js","../src/types/isLowerCase.js","../src/types/isCapitalize.js","../src/types/minNumberRange.js","../src/types/maxNumberRange.js","../src/types/notAllowedChars.js","../src/types/notAllowedSpecialChars.js","../src/types/notAllowedWords.js","../src/types/isHex.js","../src/index.js"],"sourcesContent":["export const isFunction = val => typeof val === 'function' ? true : false\r\nexport const isArray = val => typeof val === 'object' && Array.isArray(val) ? true : false\r\nexport const isObject = val => typeof val === 'object' && val !== null && !Array.isArray(val) ? true : false\r\nexport const isString = (val) => typeof val === 'string' ? true : false\r\nexport const isNumber = (val) => !isNaN(val) ? true : false\r\nexport const isInteger = (val) => typeof val === 'number' ? true : false\r\n\r\nexport const parseType = (compare) => {\r\n\r\n    let message     = null\r\n    let compareVal  = compare\r\n\r\n    if(isArray(compare)){\r\n        compareVal = compare[0]\r\n        message = compare[1]\r\n    }\r\n    \r\n    return {\r\n        message,\r\n        compareVal\r\n    }\r\n}","export default {\r\n    email: '$field must be an email!',\r\n    equal: '$field must be same as $compare',\r\n    url: '$field must be a valid URL',\r\n    max: '$field maximum length of $compare',\r\n    min: '$field minimum length of $compare',\r\n    required: '$field is required!',\r\n    type: '$field must be $compare',\r\n    minWords: '$field minimum words limit $compare',\r\n    maxWords: '$field maximum words limit $compare',\r\n    minNumberRange: '$field minimum Range of $compare',\r\n    maxNumberRange: '$field maximum Range of $compare',\r\n    uppercase: '$field must be uppercase!',\r\n    lowercase: '$field must be lowercase!',\r\n    capitalize: '$field must be capitalize!',\r\n    notAllowedChars: '$compare these charters are not allowed in $field',\r\n    notAllowedSpecialChars: 'special charters are not allowed in $field',\r\n    notAllowedWords: '$compare these words are not allowed in $field',\r\n    hex: '$field must be a hexadecimal charters',\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return value.length >= compare\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n           return value.length <= compare \r\n        }\r\n    }\r\n}","import {isArray, isObject, isString} from '../utils'\r\n\r\n\r\nconst types = {\r\n    bool: (val) => typeof val === 'boolean',\r\n    number: (val) => !isNaN(val),\r\n    string: (val) => isString(val),\r\n    array: (val) => isArray(val),\r\n    object: (val) => isObject(val),\r\n}\r\n\r\nexport default (value, compare) => {\r\n    if(value){\r\n        if(!types.hasOwnProperty(compare)){\r\n            message = `Invalide type given`\r\n            console.error(message, `Available Types are ${Object.keys(types).join(', ')}`)\r\n            return false\r\n        }\r\n        return types[compare](value)\r\n    }\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            const valid = value.toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\r\n            if(valid != null){\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n    }\r\n}","import {isFunction} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n\r\n    if(!isFunction(compare)){\r\n        console.error(`compare must be a function`)\r\n        return false\r\n    }\r\n\r\n    if(value){\r\n        const check = compare(value)\r\n        if(typeof check === 'boolean'){\r\n            return check\r\n        }\r\n    }\r\n    \r\n}","import {isArray, isObject, isString, isInteger} from '../utils'\r\n\r\nexport default (value) => {\r\n    if(!value){\r\n        return false\r\n    }else if(isString(value) || isArray(value)){\r\n        return value.length ? true : false\r\n    }else if(isObject(value)){\r\n        return Object.keys(value).length ? true : false\r\n    }else if(isInteger(value)){\r\n        return value ? true : false\r\n    }\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return value.toLowerCase() === compare.toLowerCase()\r\n        }\r\n    }\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(!value.toLowerCase().match(/ /g)){\r\n                var res = value.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g);\r\n                if(res !== null){\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        }\r\n    }\r\n\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return value.split(' ').length >= compare\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return value.split(' ').length <= compare\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return value === value.toUpperCase()\r\n        }\r\n    }\r\n}","import {isString} from '../utils'\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return value === value.toLowerCase()\r\n        }\r\n    }\r\n}","import {isString} from '../utils'\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return value === value.replace(/(?:^|\\s)\\S/g, w => w.toUpperCase())\r\n        }\r\n    }\r\n          \r\n}","import {isNumber} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isNumber(value) || isNumber(value)){\r\n        if(value.toString().length){\r\n            return parseInt(value) >= parseInt(compare)\r\n        }\r\n    }\r\n}","import {isNumber} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isNumber(value) || isNumber(value)){\r\n        if(value.toString().length){\r\n            return parseInt(value) <= parseInt(compare)\r\n        }\r\n    }\r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            const format = new RegExp('['+compare+']')\r\n            return !format.test(value)\r\n        }\r\n    }\r\n    \r\n}","var format = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\r\n\r\nimport {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            return !format.test(value)\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\n\r\nexport default (value, compare) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            const words = compare.replace(',', \"|\")\r\n            const pattern = new RegExp(words)\r\n            return  !value.match(pattern);\r\n        }\r\n    }\r\n    \r\n}","import {isString} from '../utils'\r\nvar format = /[0-9A-Fa-f]{6}/g\r\n\r\nexport default (value) => {\r\n    if(isString(value)){\r\n        if(value.length){\r\n            if(format.test(value)) {\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n    }\r\n}","import {isArray, isObject, isFunction, isString, parseType} from './utils'\r\nimport MESSAGES from './messages'\r\n\r\nimport min from './types/min'\r\nimport max from './types/max'\r\nimport isType from './types/isType'\r\nimport isEmail from './types/isEmail'\r\nimport compare from './types/compare'\r\nimport required from './types/required'\r\nimport isEqual from './types/isEqual'\r\nimport isUrl from './types/isUrl'\r\nimport minWords from './types/minWords'\r\nimport maxWords from './types/maxWords'\r\nimport isUpperCase from './types/isUpperCase'\r\nimport isLowerCase from './types/isLowerCase'\r\nimport isCapitalize from './types/isCapitalize'\r\nimport minNumberRange from './types/minNumberRange'\r\nimport maxNumberRange from './types/maxNumberRange'\r\nimport notAllowedChars from './types/notAllowedChars'\r\nimport notAllowedSpecialChars from './types/notAllowedSpecialChars'\r\nimport notAllowedWords from './types/notAllowedWords'\r\nimport isHex from './types/isHex'\r\n\r\n\r\nexport {\r\n    isType,\r\n    isEmail,\r\n    isEqual,\r\n    isUrl,\r\n    isHex,\r\n    isUpperCase,\r\n    isLowerCase,\r\n    isCapitalize,\r\n    minWords,\r\n    maxWords,\r\n    minNumberRange,\r\n    maxNumberRange,\r\n    notAllowedChars,\r\n    notAllowedSpecialChars,\r\n    notAllowedWords,\r\n}\r\n\r\n\r\n\r\nconst TYPES = {\r\n    type: isType,\r\n    email: isEmail,\r\n    equal: isEqual,\r\n    url: isUrl,\r\n    hex: isHex,\r\n    uppercase: isUpperCase,\r\n    lowercase: isLowerCase,\r\n    capitalize: isCapitalize,\r\n    min,\r\n    max,\r\n    compare,\r\n    required,\r\n    minWords,\r\n    maxWords,\r\n    minNumberRange,\r\n    maxNumberRange,\r\n    notAllowedChars,\r\n    notAllowedSpecialChars,\r\n    notAllowedWords,\r\n}\r\n\r\n\r\n\r\n/**\r\n * Validator\r\n */\r\nexport default (data, schema) => {\r\n   \r\n    \r\n    const info = {\r\n        data: isObject(data) ? data : {},\r\n        schema: isObject(schema) ? schema : {},\r\n        errors: {},\r\n        callback: null,\r\n        set: (name, value, _schema) => {\r\n            info.data[name] = value\r\n            info.schema[name] = _schema\r\n        },\r\n        hasError: (name) => {\r\n            if(name === undefined){\r\n                return Object.keys(info.errors).length ? true : false\r\n            }\r\n            if(info.errors.hasOwnProperty(name)){\r\n                return Object.keys(info.errors[name]).length ? true : false\r\n            }\r\n        },\r\n        errorMessage: (name) => {\r\n            if(isString(name)){\r\n                const errors = info.getErrors(name)\r\n                if(errors){\r\n                    return errors[Object.keys(errors)[0]]\r\n                }\r\n            }else{\r\n                for(let name in info.data){\r\n                    if(info.hasError(name)){\r\n                        return info.errorMessage(name)\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        getErrors: (name) => {\r\n            if(!name){\r\n                return info.errors\r\n            }\r\n            if(info.errors.hasOwnProperty(name)){\r\n                return Object.keys(info.errors[name]) ? info.errors[name] : false\r\n            }\r\n        },\r\n        removeError: (name, type) => {\r\n            const errors = info.getErrors(name)\r\n            if(errors){\r\n                if(errors.hasOwnProperty(type)){\r\n                    delete info.errors[name][type]\r\n                    if(isFunction(info.callback)){\r\n                        info.callback('removeError', info)\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        removeErrors: (name) => {\r\n            if(info.hasError(name)){\r\n                delete info.errors[name]\r\n                if(isFunction(info.callback)){\r\n                    info.callback('removeErrors', info)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    info.validate = () => {\r\n        \r\n        // comparing\r\n        for(let fieldName in info.data){\r\n            if(info.schema[fieldName]){\r\n                \r\n                let value = info.data[fieldName]\r\n                const schem = info.schema[fieldName]\r\n                if(isString(value)){\r\n                    value = value.trim()\r\n                }\r\n                if(!isObject(schem)){\r\n                    console.error(new Error(`You passed wrong format in the schema for this ${fieldName}`))\r\n                    break;\r\n                }\r\n\r\n                for(let type in schem){\r\n\r\n                    // avoid some fields\r\n                    if(type == 'nameAlias'){\r\n                        continue\r\n                    }\r\n\r\n\r\n                    if(TYPES.hasOwnProperty(type)){\r\n\r\n                        let {message, compareVal} = parseType(schem[type])\r\n                        const compared = TYPES[type](value, compareVal)\r\n\r\n                        if(compared === false){\r\n                            const field = schem['nameAlias'] || fieldName\r\n                            if(!message && MESSAGES.hasOwnProperty(type)){\r\n                                message = MESSAGES[type]\r\n                            }\r\n                            message = message.replace('$field', field)\r\n                            message = message.replace('$compare', schem[type])\r\n\r\n                            if(!isArray(info.errors[fieldName])){\r\n                                info.errors[fieldName] = {}\r\n                            }\r\n                            info.errors[fieldName][type] = message\r\n                        }else{\r\n                            info.removeError(fieldName, type)\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(isFunction(info.callback)){\r\n            info.callback('validate', info)\r\n        }\r\n    }\r\n\r\n    return info\r\n}\r\n"],"names":["isFunction","val","isArray","Array","isObject","isString","isNumber","isNaN","isInteger","parseType","compare","message","compareVal","email","equal","url","max","min","required","type","minWords","maxWords","minNumberRange","maxNumberRange","uppercase","lowercase","capitalize","notAllowedChars","notAllowedSpecialChars","notAllowedWords","hex","value","length","types","bool","number","string","array","object","hasOwnProperty","console","error","Object","keys","join","valid","toLowerCase","match","check","res","split","toUpperCase","replace","w","toString","parseInt","format","RegExp","test","words","pattern","TYPES","isType","isEmail","isEqual","isUrl","isHex","isUpperCase","isLowerCase","isCapitalize","data","schema","info","errors","callback","set","name","_schema","hasError","undefined","errorMessage","getErrors","removeError","removeErrors","validate","fieldName","schem","trim","Error","compared","field","MESSAGES"],"mappings":"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"}